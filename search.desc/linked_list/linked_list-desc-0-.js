searchState.loadedDescShard("linked_list", 0, "Linked lists that supports arbitrary removal in constant …\nA descriptor of wrapped list elements.\nA linked list.\nSpecifies which wrapper (e.g., <code>Box</code> and <code>Arc</code>) wraps the list …\nWraps an object to be inserted in a linked list.\nReturns a reference to the wrapped object.\nReturns a cursor starting on the first (front) element of …\nReturns a mutable cursor starting on the first (front) …\nReturns the argument unchanged.\nConverts the object back from the pointer representation.\nInserts the given object after <code>existing</code>.\nCalls <code>U::from(self)</code>.\nConverts the wrapped object into a pointer that represents …\nReturns whether the list is empty.\nConstructs a new empty linked list.\nRemoves the element currently at the front of the list and …\nAdds the given object to the end (back) of the list.\nRaw lists.\nRemoves the given entry.\nA list cursor that allows traversing a linked list and …\nThe type of the entries in the list.\nA descriptor of list elements.\nAn iterator for the linked list.\nThe links used to link an object on a linked list.\nReturns the element the cursor is currently positioned on.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the links to be used when linking an entry within …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves the cursor to the next element.\nMoves the cursor to the prev element.\nConstructs a new <code>Links</code> instance that isn’t inserted on …")